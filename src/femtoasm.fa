
 .o88o.                              .
 888 `"                            .o8
o888oo  .ooooo.  ooo. .oo.  .oo. .o888oo  .ooooo.   .oooo.    .oooo.o ooo. .oo.  .oo.
 888   d88' `88b `888P"Y88bP"Y88b  888   d88' `88b `P  )88b  d88(  "8 `888P"Y88bP"Y88b
 888   888ooo888  888   888   888  888   888   888  .oP"888  `"Y88b.   888   888   888
 888   888    .o  888   888   888  888 . 888   888 d8(  888  o.  )88b  888   888   888
o888o  `Y8bod8P' o888o o888o o888o "888" `Y8bod8P' `Y888""8o 8""888P' o888o o888o o888o

Logo made with https://patorjk.com/software/taag (and some minor adjustments)


        ,------------------------------------------------------.
        |                      ELF Header                      |
        |------------------------.-----------------------------|
        | Field                  | Value                       |
        |------------------------+---------.-------------------|
400000: | e_ident[EI_MAG0-3]     |         | %7F %45 %4C %46   |
400004: | e_ident[EI_CLASS]      | 64-bit  | %02               |
400005: | e_ident[EI_DATA]       | little  | %01               |
400006: | e_ident[EI_VERSION]    |         | %01               |
400007: | e_ident[EI_OSABI]      | SysV    | %00               |
400008: | e_ident[EI_ABIVERSION] |         | %00               |
400009: | e_ident[EI_PAD]        |         | %00000000000000   |
400010: | e_type                 | ET_EXEC | %0002             |
400012: | e_machine              | x86_64  | %003E             |
400014: | e_version              |         | %00000001         |
400018: | e_entry                |         | %0000000000400078 |
400020: | e_phoff                |         | %0000000000000040 |
400028: | e_shoff                |         | %0000000000000000 |
400030: | e_flags                |         | %00000000         |
400034: | e_ehsize               |         | %0040             |
400036: | e_phentsize            |         | %0038             |
400038: | e_phnum                |         | %0001             |
40003A: | e_shentsize            |         | %0040             |
40003C: | e_shnum                |         | %0000             |
40003E: | e_shstrndx             |         | %0000             |
        `------------------------+---------+-------------------'

        ,---------------------------------------------------.
        |                  Program  header                  |
        |----------.--------------------.-------------------|
        | Field    | Desc               | Value             |
        |----------+--------------------+-------------------|
400040: | p_type   | PT_LOAD            | %00000001         |
400044: | p_flags  | PF_X | PF_W | PF_R | %00000007         |
400048: | p_offset |                    | %0000000000000000 |
400050: | p_vaddr  |                    | %0000000000400000 |
400058: | p_paddr  |                    | %0000000000400000 |
400060: | p_filesz |                    | %0000000000000123 |
400068: | p_memsz  |                    | %0000000000080138 |
400070: | p_align  |                    | %0000000000001000 |
        `----------+--------------------+-------------------'


[][][] []]   []  [][]] [][][] [][]]  []    []  [][][] [][][] [][][]  [[][]]  []]   []  [][]]
  []   [][]  [] []       []   []  [] []    [] []        []     []   []    [] [][]  [] []
  []   [] [] []  [][]    []   [][]]  []    [] []        []     []   []    [] [] [] []  [][]
  []   []  [][]     []   []   [] []  []    [] []        []     []   []    [] []  [][]     []
[][][] []   [[] [[][]    []   []  []  [[][]]   [][][]   []   [][][]  [[][]]  []   [[] [[][]

.-------.
|  ADD  |
'-------'

=add_al, 04

00000100
'------'-- add al, imm8

.--------.
|  CALL  |
'--------'

=call E8

11101000
'------'-- call rel32

=call_r13 D5FF41

01000001 11111111 11010 101
'-.'   | '---.--' '-.-' '-|
  |    |     '------'-----|-- call r/m64
  |    '------------------'-- R13
  '-------------------------- REX

.-------.
|  CMP  |
'-------'

=cmp_al, 3C

00111101
'------'-- cmp al, imm8

.-------.
|  INC  |
'-------'

=inc_eax C0FF

11111111 11 000 000
'---.--' '| '.' '-|
    |     |  |    '-- dst: EAX
    |     '--|------- r/m
    '--------'------- inc r/m32

=inc_edx C2FF

11111111 11 000 010
'---.--' '| '.' '-|
    |     |  |    '-- dst: EDX
    |     '--|------- r/m
    '--------'------- inc r/m32

=inc_ebp C5FF

11111111 11 000 101
'---.--' '| '.' '-|
    |     |  |    '-- dst: EBP
    |     '--|------- r/m
    '--------'------- inc r/m32

.-------.
|  LEA  |
'-------'

=lea_rax,_[r15_+_8_*_rbx] DF048D49

0100 1001 10001101 00 000 100 11 011 111
'-.' |||| '---.--' '| '.' '-| '| '.' '.'
  |  |||'-----|-----|--|----|--|--|---'-- base: R15
  |  ||'------|-----|--|----|--|--'------ index: EBX
  |  ||       |     |  |    |  '--------- scale: 2^3
  |  ||       |     '--|----'------------ [base + index * scale]
  |  |'-------|--------'----------------- dest: RAX
  |  '--------'-------------------------- lea r64, m
  '-------------------------------------- REX

=lea_rax,_[r15_+_8_*_r12] E7048D4B

0100 1011 10001101 00 000 100 11 100 111
'-.' |||| '---.--' '| '.' '-| '| '.' '.'
  |  |||'-----|-----|--|----|--|--|---'--- base: R15
  |  ||'------|-----|--|----|--|--'------- index: R12
  |  ||       |     |  |    |  '---------- scale: 2^3
  |  ||       |     '--|----'------------- [base + index * scale]
  |  |'-------|--------'------------------ dest: RAX
  |  '--------'--------------------------- lea r64, m
  '--------------------------------------- REX

=lea_rsi,_[r14] 368D49

0100 1001 10001101 00 110 110
'-.' || | '---.--' '| '.' '.'
  |  || '-----|-----|--|---'-- src: R14
  |  |'-------|-----|--'------ dest: RSI
  |  |        |     '--------- [r/m]
  |  '--------'--------------- lea r64, m
  '--------------------------- REX

.-------.
|  Jcc  |
'-------'

=jb 72

01110010
'------'-- jb rel8

=jz 74

01110100
'------'-- jz rel8

=jne 75

01110101
'------'-- jne rel8

=jbe 76

01110110
'------'-- jbe rel8

.-------.
|  JMP  |
'-------'

=jmp EB

11101011
'------'-- jmp rel8

.-------.
|  MOV  |
'-------'

 8-bit
~~~~~~~

=mov_al, B0

10110000
'------'-- mov al, imm8

=mov_al,_[r14] 068A41

01000001 10001010 00 000 110
'-.' | | '---.--' '| '.' '-|
  |  | '-----|-----|--|----'-- src: R14
  |  '-------|-----|--'------- dst: AL
  |          |     '---------- [r/m]
  |          '---------------- mov r8, r/m8
  '--------------------------- REX

 32-bit
~~~~~~~~

=mov_ebx,_[rax_+_n] 588B

10001011 01 011 000
'---.--' '| '.' '-|
    |     |  |    '-- src: RAX
    |     |  '------- dst: EBX
    |     '---------- [r/m + disp8]
    '---------------- mov r32, r/m32

=mov_edx,_ebp EA89

10001001 11 101 010
'---.--' '| '.' '-|
    |     |  |    '-- dst: EDX
    |     |  '------- src: EBP
    |     '---------- r/m
    '---------------- mov r/m32, r32

=mov_ebp,_[rax] 288B

10001011 00 101 000
'---.--' '| '.' '-|
    |     |  |    '-- src: RAX
    |     |  '------- dst: EBP
    |     '---------- [r/m]
    '---------------- mov r32, r/m32

=mov_edi,_eax C789

10001001 11 000 111
'---.--' '| '.' '-|
    |     |  |    '-- dst: EDI
    |     |  '------- src: EAX
    |     '---------- r/m
    '---------------- mov r/m32, r32

=mov_r13d, BD41

0100 0001 10111 101
'-.' |  | '-.-' '-|
  |  |  '---|-----'-- dst: R13
  |  '------'-------- mov r32, imm32
  '------------------ REX

=mov_r14d, BE41

0100 0001 10111 110
'-.' |  | '-.-' '-|
  |  |  '---|-----'-- dst: R14
  |  '------'-------- mov r32, imm32
  '------------------ REX

=mov_r15d, BF41

0100 0001 10111 110
'-.' |  | '-.-' '-|
  |  |  '---|-----'-- dst: R14
  |  '------'-------- mov r32, imm32
  '------------------ REX

 64-bit
~~~~~~~~

=mov_[rax],_ebp 2889

10001001 00 101 000
'---.--' '| '.' '-|
    |     |  |    '-- dst: RAX
    |     |  '------- src: EBP
    |     '---------- [r/m]
    '---------------- mov r/m32, r32

=mov_[rax_+_n],_ebx 5889

10001001 01 011 000
'---.--' '| '.' '-|
    |     |  |    '-- dst: RAX
    |     |  '------- src: EBP
    |     '---------- [r/m + disp8]
    '---------------- mov r/m32, r32

=mov_r12,_rbx DC8949

0100 1001 10001001 11 011 100
'-.' || | '---.--' '| '.' '-|
  |  || '-----|-----|--|----'-- dst: R12
  |  |'-------|-----|--'------- src: RBX
  |  |        |     '---------- r/m
  |  '--------'---------------- mov r/m64, r64
  '---------------------------- REX

=mov_[r14],_rbx 1E8949

0100 1001 10001001 00 011 110
'-.' || | '---.--' '| '.' '-|
  |  || '-----|-----|--|----'-- dst: R14
  |  |'-------|-----|--'------- src: RBX
  |  |        |     '---------- [r/m]
  |  '--------'---------------- mov r/m64, r64
  '---------------------------- REX

.------.
|  OR  |
'------'

=or_al,_al C008

00001000 11 000 000
'---.--' '| '.' '-|
    |     |  |    '-- dst: AL
    |     |  '------- src: AL
    |     '---------- r/m
    '---------------- or r/m8, r8

=or_bl,_al C308

00001000 11 000 011
'---.--' '| '.' '-|
    |     |  |    '-- dst: BL
    |     |  '------- src: AL
    |     '---------- r/m
    '---------------- or r/m8, r8

.-------.
|  RET  |
'-------'

=ret C3

11000011
'------'-- ret

.-------.
|  SHR  |
'-------'

=shr_edx,_1 EAD1

11010001 11 101 010
'---.--' '| '.' '-|
    |     |  |    '-- dst: EDX
    |     '--|------- r/m
    '--------'------- shr r/m32, 1

=shl_rbx, E3C148

0100 1000 11000001 11 100 011
'-.' |  | '---.--' '| '.' '-|
  |  |  '-----|-----|--|----'-- dst: RBX
  |  |        |     '--|------- [r/m]
  |  '--------'--------'------- shl r/m64, imm8
  '---------------------------- REX

.-----------.
|  SYSCALL  |
'-----------'

=syscall 050F

0000111100000101
'--------------'-- syscall

.--------.
|  XCHG  |
'--------'

=xchg_bh,_bl FB86

10000110 11 111 011
'---.--' '| '.' '-|
    |     |  |    '-- src: BL
    |     |  '------- dst: BH
    |     '---------- r/m
    '---------------- xchg r/m8, r8

.-------.
|  XOR  |
'-------'

 8-bit
~~~~~~~

=xor_bl,_al C330

00001000 11 000 011
'---.--' '| '.' '-|
    |     |  |    '-- dst: BL
    |     |  '------- src: AL
    |     '---------- r/m
    '---------------- or r/m8, r8

 32-bit
~~~~~~~~

=xor_eax,_eax C031

00110001 11 000 000
'---.--' '| '.' '-|
    |     |  |    '-- dst: EAX
    |     |  '------- src: EAX
    |     '---------- r/m
    '---------------- xor r/m32, r32

=xor_ebx,_ebx DB31

00110001 11 011 011
'---.--' '| '.' '-|
    |     |  |    '-- dst: EBP
    |     |  '------- src: EBP
    |     '---------- r/m
    '---------------- xor r/m32, r32

=xor_edx,_edx D231

00110001 11 010 010
'---.--' '| '.' '-|
    |     |  |    '-- dst: EDX
    |     |  '------- src: EDX
    |     '---------- r/m
    '---------------- xor r/m32, r32

=xor_ebp,_ebp ED31

00110001 11 101 101
'---.--' '| '.' '-|
    |     |  |    '-- dst: EBP
    |     |  '------- src: EBP
    |     '---------- r/m
    '---------------- xor r/m32, r32

References
https://www.cs.uaf.edu/2002/fall/cs301/Encoding instructions.htm
https://wiki.osdev.org/X86-64_Instruction_Encoding
https://www.felixcloutier.com/x86/


 [][][]  [[][]]  [][]]   [][][]
[]      []    [] []   [] []
[]      []    [] []   [] [][]
[]      []    [] []   [] []
 [][][]  [[][]]  [][]]   [][][]

        start:
400078: 	$mov_r13d, %004000D6 (read_next_character)
40007E: 	$mov_r14d, %00400130 (read_write_buffer)
400084: 	$mov_r15d, %00400138 (defines_map)
        	; fallthrough

        parse_statement:
        	;      .-- read_next_character
40008A: 	$call_r13
40008D: 	$cmp_al, %3D (equal sign)
40008F: 	$jne %16 (@f)

        parse_and_store_define:
        .parse:
400091: 	$call %0000006E (parse_identifier - 400096)
        	;          .-- hash
400096: 	$mov_r12,_rbx
400099: 	$call %0000004D (parse_value - 40009E)

        .store:
        	;                     .-- hash
40009E: 	$lea_rax,_[r15_+_8_*_r12]
        	;            .----------- number of nibbles
4000A2: 	$mov_[rax],_ebp ;.------- value
4000A4: 	$mov_[rax_+_n],_ebx %04
        	; The 3 LSB of rax will be zero, so the following jmp is unnecessary
        	; ~jmp parse_statement~

        @@:
4000A7: 	$cmp_al, %24 (dollar sign)
4000A9: 	$jne %20 (@f - 4000AB)

        parse_and_load_and_write_constant:
        .parse:
4000AB: 	$call %00000054 (parse_identifier - 4000B0)

        .load:  ;                     .-- hash
4000B0: 	$lea_rax,_[r15_+_8_*_rbx]
4000B4: 	$mov_ebp,_[rax]
4000B6: 	$mov_ebx,_[rax_+_n] %04

        .write:
        	;      .-------- read_write_buffer
        	;      |     .-- data
4000B9: 	$mov_[r14],_rbx
        	; SYS_write: 1
4000BC: 	$xor_eax,_eax
4000BE: 	$inc_eax
        	;          .---- number of nibbles
4000C0: 	$mov_edx,_ebp
        	; divide by 2 to convert nibbles to bytes
4000C2: 	$shr_edx,_1
4000C4: 	$call %00000013 (read_or_write - 4000C9)
        	; this jmp didn't exist previously, but since read_or_write returns the character
        	; written, we need this or the next test would fail if we write a 0x24
4000C9: 	$jmp %BF (parse_statement - 4000CB)

        @@:
4000CB: 	$cmp_al, %25 (percent sign)
        	; if it's none of these, then it's a comment
4000CD: 	$jne %BB (parse_statement - 4000CF)
        	; fallthrough

        parse_and_write_literal:
        .parse:
4000CF: 	$call %00000017 (parse_value - 4000D4)
        .write:
4000D4: 	$jmp %E3 (parse_and_load_and_write_constant.write - 4000D6)

        read_next_character:
        	; SYS_read: 0
4000D6: 	$xor_eax,_eax
        	; read 1 byte
4000D8: 	$xor_edx,_edx
4000DA: 	$inc_edx
        	; fallthrough

        read_or_write:
        	; file descriptor coincides with the syscall number
        	; SYS_read: STDIN_FILENO, SYS_write: STDOUT_FILENO
4000DC: 	$mov_edi,_eax
        	;           .-- read_write_buffer
4000DF: 	$lea_rsi,_[r14]
4000E1: 	$syscall
        	; if read, quit on EOF; if write, quit if undefined
4000E3: 	$or_al,_al
4000E5: 	$jz %36 (exit - 4000E8)
        	;          .--- read_write_buffer
4000E8: 	$mov_al,_[r14]
4000EA: 	$ret

        parse_value:
4000EB: 	$xor_ebp,_ebp
        .next:
        	;      .-- read_next_character
4000ED: 	$call_r13
4000F0: 	$cmp_al, %20 (' ')
4000F2: 	$jbe %0F (.end - 4000F4)
4000F4: 	$call %0000001B (convert_nibble - 4000F9)
        	;     .--- nibble counter
4000F9: 	$inc_ebp
        	;     .--- accumulator
4000FB: 	$shl_rbx, %04
4000FF: 	$or_bl,_al
400101: 	$jmp %EA (.next - 400103)
        .end:
400103: 	$ret

        parse_identifier:
        	;     .----.-- hash
400104: 	$xor_ebx,_ebx
        .next:
        	;      .------ read_next_character
400106: 	$call_r13
400109: 	$cmp_al, %20 (' ')
40010B: 	$jbe %06 (.end - 40010D)
40010D: 	$xchg_bh,_bl
40010F: 	$xor_bl,_al
400111: 	$jmp %F3 (.next - 400113)
        .end:
400113: 	$ret

        convert_nibble:
400114: 	$add_al, %D0 (-'0')
400116: 	$cmp_al, %0A
400118: 	$jb %02 (.done - 40011A)
40011A: 	$add_al, %F9 (0xA + '0' - 'A')
        .done:
40011C: 	$ret

        exit:
40011D: 	$xor_eax,_eax
        	; SYS_exit_group
40011F: 	$mov_al, %E7
400121: 	$syscall

        ; needed for some optimizations done above
        align 16

400130: read_write_buffer dq ?

        ;                    .-------- bytes per entry (we only actually use 5 bytes)
        ;                    |      .- number of entries (16-bit hash)
400138: defines_map       rb 8 * 0x10000
